
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEASSIGN BLOCK_END BLOCK_START COMMA DIVIDE DOUBLECOLON F64 FNX GT I32 IDENTIFIER IF LANGLE LBRACKET LET LPAREN MINUS MOD NUMBER PLUS RANGLE RBRACKET RPAREN STRING TIMES TXTprogram : statementsstatements : statement statementsstatements : statementstatement : MOD IDENTIFIER DOUBLECOLONstatement : FNX IDENTIFIER LBRACKET paramlist RBRACKET BLOCK_START statements BLOCK_ENDparamlist : type IDENTIFIERparamlist : type IDENTIFIER COMMA paramlisttype : TXT\n| I32\n| F64statement : LET type IDENTIFIER ASSIGN expression DOUBLECOLONexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression GT expressionexpression : LPAREN expression RPARENexpression : IDENTIFIER\n| NUMBERexpression : STRINGstatement : IF LBRACKET expression RBRACKET BLOCK_START statements BLOCK_ENDstatement : IDENTIFIER LPAREN args RPAREN DOUBLECOLONargs : expressionargs : expression COMMA args'
    
_lr_action_items = {'MOD':([0,3,18,41,51,52,54,58,59,],[4,4,-4,-22,4,4,-11,-21,-5,]),'FNX':([0,3,18,41,51,52,54,58,59,],[6,6,-4,-22,6,6,-11,-21,-5,]),'LET':([0,3,18,41,51,52,54,58,59,],[7,7,-4,-22,7,7,-11,-21,-5,]),'IF':([0,3,18,41,51,52,54,58,59,],[8,8,-4,-22,8,8,-11,-21,-5,]),'IDENTIFIER':([0,3,4,6,11,13,14,15,16,17,18,20,30,31,32,33,34,35,37,38,41,51,52,54,58,59,],[5,5,10,12,19,26,-8,-9,-10,19,-4,19,19,19,19,19,19,19,49,19,-22,5,5,-11,-21,-5,]),'$end':([1,2,3,9,18,41,54,58,59,],[0,-1,-3,-2,-4,-22,-11,-21,-5,]),'BLOCK_END':([3,9,18,41,54,55,56,58,59,],[-3,-2,-4,-22,-11,58,59,-21,-5,]),'LPAREN':([5,11,17,20,30,31,32,33,34,35,38,],[11,20,20,20,20,20,20,20,20,20,20,]),'TXT':([7,25,53,],[14,14,14,]),'I32':([7,25,53,],[15,15,15,]),'F64':([7,25,53,],[16,16,16,]),'LBRACKET':([8,12,],[17,25,]),'DOUBLECOLON':([10,19,23,24,29,40,43,44,45,46,47,50,],[18,-18,-19,-20,41,-17,-12,-13,-14,-15,-16,54,]),'NUMBER':([11,17,20,30,31,32,33,34,35,38,],[23,23,23,23,23,23,23,23,23,23,]),'STRING':([11,17,20,30,31,32,33,34,35,38,],[24,24,24,24,24,24,24,24,24,24,]),'COMMA':([19,22,23,24,40,43,44,45,46,47,49,],[-18,30,-19,-20,-17,-12,-13,-14,-15,-16,53,]),'PLUS':([19,22,23,24,27,28,40,43,44,45,46,47,50,],[-18,31,-19,-20,31,31,-17,-12,-13,-14,-15,31,31,]),'MINUS':([19,22,23,24,27,28,40,43,44,45,46,47,50,],[-18,32,-19,-20,32,32,-17,-12,-13,-14,-15,32,32,]),'TIMES':([19,22,23,24,27,28,40,43,44,45,46,47,50,],[-18,33,-19,-20,33,33,-17,33,33,-14,-15,33,33,]),'DIVIDE':([19,22,23,24,27,28,40,43,44,45,46,47,50,],[-18,34,-19,-20,34,34,-17,34,34,-14,-15,34,34,]),'GT':([19,22,23,24,27,28,40,43,44,45,46,47,50,],[-18,35,-19,-20,35,35,-17,-12,-13,-14,-15,35,35,]),'RPAREN':([19,21,22,23,24,28,40,42,43,44,45,46,47,],[-18,29,-23,-19,-20,40,-17,-24,-12,-13,-14,-15,-16,]),'RBRACKET':([19,23,24,27,36,40,43,44,45,46,47,49,57,],[-18,-19,-20,39,48,-17,-12,-13,-14,-15,-16,-6,-7,]),'ASSIGN':([26,],[38,]),'BLOCK_START':([39,48,],[51,52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,3,51,52,],[2,9,55,56,]),'statement':([0,3,51,52,],[3,3,3,3,]),'type':([7,25,53,],[13,37,37,]),'args':([11,30,],[21,42,]),'expression':([11,17,20,30,31,32,33,34,35,38,],[22,27,28,22,43,44,45,46,47,50,]),'paramlist':([25,53,],[36,57,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','PunkPort2.py',18),
  ('statements -> statement statements','statements',2,'p_statements_multiple','PunkPort2.py',23),
  ('statements -> statement','statements',1,'p_statements_single','PunkPort2.py',27),
  ('statement -> MOD IDENTIFIER DOUBLECOLON','statement',3,'p_statement_import','PunkPort2.py',32),
  ('statement -> FNX IDENTIFIER LBRACKET paramlist RBRACKET BLOCK_START statements BLOCK_END','statement',8,'p_statement_funcdef','PunkPort2.py',37),
  ('paramlist -> type IDENTIFIER','paramlist',2,'p_paramlist_single','PunkPort2.py',42),
  ('paramlist -> type IDENTIFIER COMMA paramlist','paramlist',4,'p_paramlist_multiple','PunkPort2.py',46),
  ('type -> TXT','type',1,'p_type','PunkPort2.py',51),
  ('type -> I32','type',1,'p_type','PunkPort2.py',52),
  ('type -> F64','type',1,'p_type','PunkPort2.py',53),
  ('statement -> LET type IDENTIFIER ASSIGN expression DOUBLECOLON','statement',6,'p_statement_assignment','PunkPort2.py',58),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','PunkPort2.py',63),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','PunkPort2.py',64),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','PunkPort2.py',65),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','PunkPort2.py',66),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','PunkPort2.py',67),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','PunkPort2.py',71),
  ('expression -> IDENTIFIER','expression',1,'p_expression_atomic','PunkPort2.py',75),
  ('expression -> NUMBER','expression',1,'p_expression_atomic','PunkPort2.py',76),
  ('expression -> STRING','expression',1,'p_expression_string','PunkPort2.py',80),
  ('statement -> IF LBRACKET expression RBRACKET BLOCK_START statements BLOCK_END','statement',7,'p_statement_if','PunkPort2.py',85),
  ('statement -> IDENTIFIER LPAREN args RPAREN DOUBLECOLON','statement',5,'p_statement_funccall','PunkPort2.py',90),
  ('args -> expression','args',1,'p_args_single','PunkPort2.py',94),
  ('args -> expression COMMA args','args',3,'p_args_multiple','PunkPort2.py',98),
]
